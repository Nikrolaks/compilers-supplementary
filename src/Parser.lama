-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun fromOp(op) {	
  [s(op), fun(l, t, r) {Binop(op, l, r)}]	
}

-- Primary expression
var primary = memo $ eta syntax (
          x=decimal {Const (stringInt (x))}
        | x=lident  {Var (x)}
        | inbr[s("("), exp, s(")")]
), exp = memo $ eta expr({
        [Left, {fromOp("!!")}],
        [Left, {fromOp("&&")}],
        [Nona, {
            fromOp("=="),
            fromOp("<="),
            fromOp(">="),
            fromOp("!="),
            fromOp("<"),
            fromOp(">")
        }],
        [Left, {fromOp("+"), fromOp("-")}],
        [Left, {fromOp("*"), fromOp("/"), fromOp("%")}]
        }, primary
);

var base = memo $ eta syntax (
      kSkip {Skip}
    | v=lident s[":="] e=exp {Assn(v, e)}
    | kRead s["("] x=lident s[")"] {Read(x)}
    | kWrite s["("] x=exp s[")"] {Write(x)}
  ),
  stmt = memo $ eta syntax(
    u=base s[";"] v=stmt {Seq(u, v)}
  | base
);

-- Public top-level parser
public parse = stmt;
