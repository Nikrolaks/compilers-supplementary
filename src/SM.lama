-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
      READ         -> "READ"
    | WRITE        -> "WRITE"
    | BINOP (s)    -> sprintf ("BINOP %s", s)
    | LD    (x)    -> sprintf ("LD %s", x)
    | LDA   (x)    -> sprintf ("LDA %s", x)
    | ST    (x)    -> sprintf ("ST %s", x)
    | STI          -> "STI"
    | CONST (n)    -> sprintf ("CONST %d", n)
    | LABEL (s)    -> sprintf ("LABEL %s", s)
    | JMP   (l)    -> sprintf ("JMP %s", l)
    | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
    | DUP          -> "DUP"
    | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
      fun ([m, insns]) {
        case insns of
            {}               -> m
          | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
          | _ : tl           -> rec ([m, tl])
        esac
      }
    }) $ [emptyMap (compare), insns];

  [fun (l) {
    case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun flagmean(jtype) {
  case jtype of
      "nz" -> 1
    | "z"  -> 0
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval(env, c@[stack, state, world], insns) {
  case insns of
      { }        -> c
    | (i : nsns) ->
      case i of
        READ -> 
          case readWorld(world) of
            [fst, w] -> eval(env, [fst:stack, state, w], nsns)
          esac
      | WRITE ->
          case stack of
            (x : xs) -> eval(env, [xs, state, writeWorld(x, world)], nsns)
          esac
      | BINOP (op) ->
          case stack of
            x : y : stk -> eval(env, [evalOp(op, y, x):stk, state, world], nsns)
          esac
      | LD (x) -> eval(env, [state(x):stack, state, world], nsns)
      | ST (x) -> 
          case stack of
            (y : ys) -> eval(env, [ys, state <- [x, y], world], nsns)
          esac
      | CONST (n) -> eval(env, [n:stack, state, world], nsns)
      | JMP (l) -> eval(env, c, env.fromLabel(l))
      | LABEL(l) -> eval(env, c, nsns)
      | CJMP(v, l) ->
          case stack of
            (x : xs) -> (
              var e = flagmean(v);
              if x == e
              then eval(env, [xs, state, world], env.fromLabel(l))
              elif x == 1 - e
              then eval(env, [xs, state, world], nsns)
              else failure("CJMP bad argument")
              fi
            )
          esac
      | STI ->
          case stack of
            (x : xs) ->
              case xs of
                (Ref(y) : ys) -> eval(env, [x:ys, state <- [y, x], world], nsns)
              esac
          esac
      | DROP ->
          case stack of
            (_ : stack) -> eval(env, [stack, state, world], nsns)
          esac
      | LDA (t) -> eval(env, [Ref(t):stack, state, world], nsns)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
    [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
      then {env}
      else case env.genLabel of
        [lab, env] -> lab : inner (env, n-1)
      esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
      then singletonBuffer (LABEL (lab))
      else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
        Ref (x) -> [false, env, singletonBuffer(LDA(x))]
      | Var (x) -> [false, env, singletonBuffer(LD(x))]
      | Const (n) -> [false, env, singletonBuffer(CONST(n))]
      | Binop (op, x, y) ->
          case env.genLabels(2) of
            [lab1, lab2, env] ->
              case compile(lab1, env, x) of
                [lab1Used, env, xCode] ->
                  case compile(lab2, env, y) of
                    [lab2Used, env, yCode] -> [
                      false,
                      env,
                      xCode
                      <+> label(lab1, lab1Used)
                      <+> yCode
                      <+> label(lab2, lab2Used)
                      <+> singletonBuffer(BINOP(op))]
                  esac
              esac
          esac
      | Skip -> [false, env, emptyBuffer()]
      | Read (x) -> [false, env, singletonBuffer(READ) <+ ST(x)]
      | Write (e) ->
          case env.genLabel of
            [lab, env] ->
              case compile(lab, env, e) of
                [labUsed, env, code] ->
                  [false, env, code <+ WRITE <+> label(lab, labUsed)]
              esac
          esac
      | Assn (x, e) ->
          case env.genLabels(2) of
            [labX, labE, env] ->
              case compile(labX, env, x) of
                [labXUsed, env, xCode] ->
                  case compile(labE, env, e) of
                    [labEUsed, env, eCode] -> [
                      false,
                      env,
                      xCode
                      <+> label(labX, labXUsed)
                      <+> eCode
                      <+> label(labE, labEUsed)
                      <+> singletonBuffer(STI)]
                  esac
              esac
          esac
      | Seq (s1, s2) ->
          case env.genLabel of
            [s2Lab, env] ->
              case compile(s2Lab, env, s1) of
                [s2LabUsed, env, s1Code] ->
                  case compile(lab, env, s2) of
                    [labUsed, env, s2Code] -> [
                      labUsed,
                      env,
                      s1Code
                      <+> label(s2Lab, s2LabUsed)
                      <+> s2Code]
                  esac
              esac
          esac
      | While (e, s) ->
          case env.genLabels(3) of
            [lab1, lab2, lab3, env] ->
              case compile(lab2, env, s) of
                [_, env2, sCode] ->
                  case compile(lab3, env, e) of
                    [lab3Used, env, eCode] -> [
                      false,
                      env,
                      singletonBuffer(JMP(lab2))
                      <+> singletonBuffer(LABEL(lab1))
                      <+> sCode
                      <+> singletonBuffer(LABEL(lab2))
                      <+> eCode
                      <+> label(lab3, lab3Used)
                      <+> singletonBuffer(CJMP("nz", lab1))]
                  esac
              esac
          esac      
      | DoWhile (e, s) ->
          case env.genLabels(3) of
            [lab1, lab2, lab3, env] ->
              case compile(lab2, env, s) of
                [lab2Used, env, sCode] ->
                  case compile(lab3, env, e) of
                    [lab3Used, env, eCode] -> [
                      false,
                      env,
                      singletonBuffer(LABEL(lab1))
                      <+> sCode
                      <+> label(lab2, lab2Used)
                      <+> eCode
                      <+> label(lab3, lab3Used)
                      <+> singletonBuffer(CJMP("nz", lab1))]
                  esac
              esac
          esac
      | If (e, s1, s2) ->
          case env.genLabels(2) of
            [lab1, lab2, env] ->
              case compile(lab, env, s2) of
                [_, env, s2Code] ->
                  case compile(lab, env, s1) of
                    [_, env, s1Code] ->
                      case compile(lab2, env, e) of
                        [lab2Used, env, eCode] -> [
                          true,
                          env,
                          eCode
                          <+> label(lab2, lab2Used)
                          <+> singletonBuffer(CJMP("nz", lab1))
                          <+> s2Code
                          <+> singletonBuffer(JMP(lab))
                          <+> singletonBuffer(LABEL(lab1))
                          <+> s1Code]
                      esac
                  esac
              esac
          esac
      | Ignore (e) ->
          case env.genLabel of
            [lab, env] ->
              case compile(lab, env, e) of
                [labUsed, env, eCode] -> [
                  false,
                  env,
                  eCode
                  <+> label(lab, labUsed)
                  <+> singletonBuffer(DROP)]
              esac
          esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
      esac
  esac
}
