-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of 
    {} -> c
  | (i : nsns) ->
      case i of
        READ -> 
          case c of
            [stk, st, w] -> 
              case readWorld(w) of 
                [fst, w] -> 
                  eval(env, 
                    [fst : stk, st, w], 
                    nsns)
              esac                  
          esac
      | WRITE ->
          case c of
            [fst : stk, st, w] -> 
              eval(env, 
                [stk, st, writeWorld(fst, w)],
                nsns)
          esac
      | BINOP (s) -> 
          case c of
            [y : x : stk, st, w] -> 
              eval(env, 
                [doBinop(s, x, y): stk, st, w],
                nsns)
          esac
      | LD    (x) -> 
          case c of
            [stk, st, w] -> 
              eval(env, 
                [st(x) : stk, st, w],
                nsns)
          esac
      | ST    (x) ->
          case c of
            [fst : stk, st, w] -> 
              eval(env, 
                [stk, st <- [x, fst], w],
                nsns)
          esac
      | CONST (n) -> 
          case c of
            [stk, st, w] -> 
              eval(env, 
                [n : stk, st, w],
                nsns)
          esac
      | JMP (lab) ->
          eval(env, c, env[0](lab))
      | LABEL (lab) -> eval(env, c, nsns)
      | CJMP (flg, lab) ->
          case c of
            [condition : stk, st, w] -> 
              if condition != 0 then
                eval(env, [stk, st, w], env[0](lab))
              else
                eval(env, [stk, st, w], nsns)
              fi
          esac
      esac
  | _ -> c
  esac
}

fun labelEnv (insns) {
  var labelsVSpoints =
    fix (fun (rec) {
          fun ([pt, insns]) {
            case insns of
              {}               -> pt
            | LABEL (lab) : tl -> rec ([addMap (pt, lab, insns), tl])
            | _ : tl           -> rec ([pt, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (labelsVSpoints, l) of
      Some (insns) -> insns
    esac
  }]
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (labelEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var   (name) -> singletonBuffer (LD (name)) 
  | Const (value) -> singletonBuffer (CONST (value))
  | Binop (op, ex1, ex2) -> compileExpr(ex1) <+> compileExpr(ex2) <+> singletonBuffer (BINOP (op))
  esac
}

fun makeLabels (n) {
  [fun () {
     [sprintf ("L%d", n), makeLabels (n+1)]
  }]
}

fun genOneLabel (env) {
  env [0] ()
}

fun genLabels (env, n) {
  fun labelsFactory (env, n) {
    if n == 0
    then { env }
    else
      case env.genOneLabel of
        [lab, env] -> lab : labelsFactory (env, n - 1)
      esac
    fi
  }

  listArray (labelsFactory (env, n))
}

fun usedLabel(lab) {
  singletonBuffer (LABEL (lab))
}

fun labelFilter(lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genOneLabel of
          [snd, env] ->
             case compile (snd, env, s1) of
               [sndUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> 
                      [labUsed,
                        env,
                        s1Code
                          <+> labelFilter(snd, sndUsed)
                          <+> s2Code]
                  esac
             esac
        esac
    | While (condition, code) ->
        case env.genLabels(2) of
          [fst, snd, env] -> 
            case compile(fst, env, code) of
              [fstUsed, env, subCode]  ->
                [false,
                  env,
                  singletonBuffer (JMP (snd))
                    <+> usedLabel (fst)
                    <+> subCode
                    <+> usedLabel (snd)
                    <+> compileExpr (condition)
                    <+ CJMP("nz", fst)]
            esac
        esac
    | DoWhile (code, condition) ->
        case compile(lab, env, code) of
          [labUsed, env, subCode]  ->
            [labUsed,
              env,
              usedLabel(lab)
              <+> subCode
              <+> compileExpr (condition)
              <+ CJMP("nz", lab)]
        esac
    | If (condition, stmt1, stmt2) ->
        case env.genLabels(3) of
          [fst, snd, thd, env] ->
            case compile(fst, env, stmt1) of
              [fstUsed, env, s1Code] ->
                case compile(snd, env, stmt2) of
                  [sndUsed2, env, s2Code] ->
                    [false,
                      env,
                      compileExpr(condition)
                        <+ CJMP("nz", fst)
                        <+> s2Code
                        <+ JMP(thd)
                        <+> usedLabel (fst)
                        <+> s1Code
                        <+> usedLabel (thd)]
                esac
            esac
        esac
    | _              -> failure ("Broken statement\n")
    esac
  }  

  case makeLabels(0).genOneLabel of
    [fst, env] ->
       case compile (fst, env, stmt) of
         [fstUsed, _, code] -> getBuffer (code <+> labelFilter(fst, fstUsed))
       esac
  esac
}