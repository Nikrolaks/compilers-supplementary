-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun readSM([stack, state, world]) {
  case readWorld(world) of
    [z, w] -> [z : stack, state, w]
  esac
}

fun writeSM([stack, state, world]) {
  case stack of
    a : st -> [st, state, writeWorld(a, world)]
  esac
}

fun binopSM([stack, state, world], op) {
  case stack of
    y : x : st -> [doBinop(op, x, y) : st, state, world]
  esac
}

fun ldSM([stack, state, world], x) {
  [state(x) : stack, state, world]
}

fun stSM([stack, state, world], x) {
  case stack of
    v : st -> [st, state <- [x, v], world]
  esac
}

fun constSM([stack, state, world], n) {
  [n : stack, state, world]
}

fun evalOneInstruction(c, p) {
  case p of
    READ -> readSM(c)
  | WRITE -> writeSM(c)
  | BINOP (op) -> binopSM(c, op)
  | LD (x) -> ldSM(c, x)
  | ST (x) -> stSM(c, x)
  | CONST (n) -> constSM(c, n)
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | p : ps -> eval(evalOneInstruction(c, p), ps)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
   case expr of
    Var (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, ex1, ex2) -> compileExpr(ex1) +++ compileExpr(ex2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, ex) -> compileExpr(ex) +++ {ST (x)}
  | Read (x) -> {READ, ST (x)}
  | Write (ex) -> compileExpr(ex) +++ {WRITE}
  | Seq (fs, sn) -> compileSM(fs) +++ compileSM(sn)
  | Skip -> {}
  esac
}
