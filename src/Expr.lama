-- Expression evaluator

import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun doBinop(s, v1, v2) {
  case s of
    "+" -> v1 + v2
  | "-" -> v1 - v2
  | "*" -> v1 * v2
  | "/" -> v1 / v2
  | "%" -> v1 % v2
  | "==" -> v1 == v2
  | "!=" -> v1 != v2
  | "<" -> v1 < v2
  | "<=" -> v1 <= v2
  | ">" -> v1 > v2
  | ">=" -> v1 >= v2
  | "&&" -> v1 && v2
  | "!!" -> v1 !! v2
  esac
}

public fun evalExpr (st, expr) {
  case expr of
      Var (s) -> st(s)
  |   Const (n) -> n
  |   Binop (s, ex1, ex2) -> doBinop(s, evalExpr(st, ex1), evalExpr(st, ex2))
  esac
}
